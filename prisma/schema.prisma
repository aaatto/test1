// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Loads from .env file
}

// USER MODEL
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts                Account[]
  sessions                Session[]
  creditPurchases         CreditPurchase[]
  passwordGenerationRequests PasswordGenerationRequest[]
}

// NEXTAUTH ADAPTER MODELS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION SPECIFIC MODELS
model CreditPurchase {
  id             String   @id @default(cuid())
  userId         String
  paypalOrderId  String   @unique
  amountPaid     Float
  currency       String   @default("USD")
  creditsGranted Int
  status         String   // e.g., PENDING, COMPLETED, FAILED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum FeedbackValue {
  YES
  NO
  NONE
}

model PasswordGenerationRequest {
  id           String        @id @default(cuid())
  userId       String
  feedback     FeedbackValue @default(NONE)
  feedbackText String?       @db.Text
  createdAt    DateTime      @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Blog {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  content   String   @db.Text
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

